(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{179:function(t,s,n){"use strict";n.r(s);var e=n(0),a=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"了解-element-的项目结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#了解-element-的项目结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 了解 Element 的项目结构")]),t._v(" "),n("p",[t._v("你可以把 Element 的源码 clone 到本地，也可以安装方便在线查看 GitHub 仓库代码的 Chrome 扩展，总之我们首先要做的事情就是先把 Element 源码的目录结构都弄清楚：了解每个文件的作用是什么，Element 是如何规划目录的等等。")]),t._v(" "),n("p",[t._v("详细目录介绍如下：")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("element\n├── build    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 存放所有的打包，自动化生成、构建、部署工具")]),t._v("\n├── examples "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 项目示例，官网页面等")]),t._v("\n├── packages "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所有的组件及主题文件")]),t._v("\n├── src      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 源码")]),t._v("\n│    ├── directives  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指令")]),t._v("\n│    ├── locale      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 国际化")]),t._v("\n│    ├── mixins      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 混合")]),t._v("\n│    ├── transitions "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 内置过度动画组件")]),t._v("\n│    ├── utils       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 工具")]),t._v("\n│    └── index.js    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 入口文件。这个文件是自动生成的")]),t._v("\n├── "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),t._v("             "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 存放测试文件")]),t._v("\n├── types            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# .ts 文件，为组件定义一些数据类型规范")]),t._v("\n├── .babelrc         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# babel 配置文件")]),t._v("\n├── .eslintignore    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# eslint 校验忽略")]),t._v("\n├── .eslintrc        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# eslint 配置文件")]),t._v("\n├── .gitattributes   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# github 自动识别项目属于哪种语言")]),t._v("\n├── .gitignore       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git 提交忽略")]),t._v("\n├── .travis.yml      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 线上构建配置")]),t._v("\n├── CHANGElOG.*.MD   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更新日志")]),t._v("\n├── FAQ.MD           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一些开发中的常见问题汇总及解决方法")]),t._v("\n├── LICENSE          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 项目版权声明")]),t._v("\n├── Makefile         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Make 配置文件。用来自动化部署项目")]),t._v("\n├── README.md        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 项目介绍")]),t._v("\n├── components.json  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组件及入口文件。为了后续自动化处理")]),t._v("\n├── element_logo.svg\n├── package.json     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 项目依赖及配置")]),t._v("\n├── postcss.config.js "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Css 预处理配置")]),t._v("\n└── yarn.lock        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# yarn 模块安装工具生成的版本锁文件")]),t._v("\n")])])]),n("p",[t._v("关于上面对目录和文件的描述也许你一眼看上去一头雾水，还是不理解他在干什么，没关系，这是正常的，在你没有深入到源码之前，仅仅凭借几句话就理解这个文件的作用是不可能的，所以不要灰心，只需要有个大概印象混个眼熟就可以了。")])])}],!1,null,null,null);a.options.__file="structure.md";s.default=a.exports}}]);